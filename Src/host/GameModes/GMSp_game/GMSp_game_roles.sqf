// ======================================================
// Copyright (c) 2017-2025 the ReSDK_A3 project
// sdk.relicta.ru
// ======================================================

#include <..\GameMode.h>

// Базовая роль для режима GMSp_game. Рекомендуется именовать все дочерние роли для этого режима с постфиксом имени режима и префиксом R (Role)
// Пример: RCaveExplorer_GMSp_game
class(GMSp_game_BasicRole) extends(BasicRole) // BasicRole - базовая роль, от которой унаследованы все возможные роли.
    
    // -----------------------------------------------------------------//
    // -------------------- Базовые настройки роли ---------------------//
    // -----------------------------------------------------------------//
	var(name,"Игрок");
	var(desc,"Главный герой.");

	// Указывает что роль будет являться ключевой. Ключевые роли имеют более высокий приоритет при случайном распредлении.
	// Установите true требуется для тех ролей, без которых режим GMSp_game не сможет полноценно функционировать.
	getter_func(isMainRole,false);

	// Данное свойство потребует смены лица и имени при следующем заходе за любую другую роль. 
	/* 
		Оно нужно для того, чтобы игроки после смерти не заходили за персонажа с таким же именем и лицом как и в предыдущей роли
		Например у жрунов это свойство принимает значение false 
	*/
	getter_func(canStoreNameAndFaceForValidate,true);

	/*
		Сколько человек может зайти за эту роль. При заходе каждого игрока данный счетчик уменьшается на 1.
		Когда счетчик становится равным 0 роль удаляется из списка ролей, которые можно взять
	*/
	var(count,10000);
	
	// Создаваемый тип персонажа, если клиент в настройках указал мужской пол.
	var(classMan,"Mob");
	// Создаваемый тип персонажа, если клиент в настройках указал женский пол.
	var(classWoman,"MobWoman");

	// Если данное поле true, то после смерти персонажа игрока сразу вернет в лобби вместо возможности зайти в призрака
	var(returnInLobbyAfterDead,true);

	getter_func(spawnLocation,null);

	getter_func(getInitialPos,vec3(0,0,0));
	getter_func(getInitialDir,0);
	getter_func(useRandomDirOnSpawn,false);

	getter_func(connectedTo,null);

	// ---------------- Управление доступом роли ----------------

	func(canTakeInLobby)
	{
		objParams_2(_usr,_canPrintErrors);
		true
	};
	func(canVisibleAfterStart)
	{
		objParams_1(_usr);
		true
	};



	// ---------------------- Навыки ----------------------

	// Массив базовых атрибутов:
	// Сила (ST), Интеллект (IQ), Ловкость (DX), Здоровье (HT)
	getter_func(getSkills,"st: 10; dx: 10; iq: 10; ht: 10");

	//Список дополнительных навыков
	func(getOtherSkills) {
		"fight:0;" //навык рукопашного боя
		+ "shield:0;" //навык владения щитами
		+ "fencing:0;" //навык владения фехтовальным оружием
		+ "axe:0;" //навык владения топорами
		+ "baton:0;" //навык валдения дубиной
		+ "spear:0;" //навык владения копьем
		+ "sword:0;" //навык владения мечами
		+ "knife:0;" //навык владения ножами
		+ "whip:0;" //навык владения кнутами

		+ "pistol:0;" //навык владения пистолетами
		+ "rifle:0;" //навык владения винтовками
		+ "shotgun:0;" //навык владения дробовиками
		+ "crossbow:0;" //навык стрельбы из лука

		+ "throw:0;" //навык метания

		+ "chemistry:0;" //навык работы с химией
		+ "alchemy:0;" //навык работы с пещерной химией

		+ "engineering:0;" //навык строительства
		+ "traps:0;" //навык работы с ловушками
		+ "repair:0;" //навык ремонта
		+ "blacksmithing:0;" //навык кузнецкого ремесла
		+ "craft:0;" //навык создания различных предметов

		+ "theft:0;" //навык воровства
		+ "stealth:0;" //навык скрытности
		+ "agility:0;" //навык акробатики
		+ "lockpicking:0;" //навык взлома

		+ "healing:0;" //навык первой помощи
		+ "surgery:0;" //навык хирургии

		+ "cavelore:0;" //навык знания пещер

		+ "cooking:0;" //навык готовки
		+ "farming:0;" //навык фермерства
	};

	// Функция, в которой можно выдать экипировку персонажу
	func(getEquipment)
	{
		objParams_1(_mob);
	};

	// Вызывается когда клиент зашёл за роль и полностью загрузился
	func(onAssigned)
	{
		//_mob - персонаж, _usr - клиент
		objParams_2(_mob,_usr);
		
	};

	// Функция, вызывающаяся когда умирает персонаж, зашедший за эту роль с самого начала
	func(onDeadBasic)
	{
		objParams_2(_mob,_usr);
	};

	// Вызывается при конце раунда для персонажа, владеющего этой ролью со старта.
	func(onEndgameBasic)
	{
		objParams_2(_mob,_usr);
	};

	func(onDead)
	{
		objParams_2(_mob,_usr);
	};

	func(onEndgame)
	{
		objParams_2(_mob,_usr);
	};

	func(canBeFullAntag)
	{
		objParams_1(_usr); // _usr - клиент, игрок
		true // Исходя из примечания выше, целесообразнее было бы написать: !callSelf(isMainRole)
	};

	// Может ли быть данная роль скрытым антагонистом
	func(canBeHiddenAntag)
	{
		objParams_1(_usr); // _usr - клиент, игрок
		true
	};
	
endclass