// ======================================================
// Copyright (c) 2017-2025 the ReSDK_A3 project
// sdk.relicta.ru
// ======================================================

#include <..\GameMode.h>

editor_attribute("CodeOnyGamemode")
class(GMSp_game) extends(GMBase) //GMBase - базовый режим, от которого унаследованы все возможные режимы.
	
    // -----------------------------------------------------------------//
    // ------------------ Базовые настройки режима ---------------------//
    // -----------------------------------------------------------------//

    // Текстовые данные режима GMSp_game
	var(name,"Игра");
	var(desc,"Описание");
	var(descExtended,"Описание в конце игры.");
	getterconst_func(isPlayableGamemode,!isMultiplayer);

	// Длительность игры в режиме GMSp_game.
	var(duration,t_asHrs(24));
	getterconst_func(getMapName,"sp_guide");
	getterconst_func(getProbability,100);
	//минимальное и максимальное колчиество людей для случайного выбора режима
	getterconst_func(getReqPlayersMin,1);
	getterconst_func(getReqPlayersMax,5);


    // ------- Настройки для лобби -------

	// Путь до композиции, проигрываемой в лобби (в формате .ogg)
	getterconst_func(getLobbySoundName,"lobby\First_Steps.ogg");
	// Путь до изображения заднего фона в лобби (в формате .paa)
	getterconst_func(getLobbyBackground,PATH_PICTURE("lobby\lobby.paa"));

	// Список ролей (имён классов) для режима GMSp_game, доступных до старта раунда.
	func(getLobbyRoles)
	{
		[
			"GMSp_game_BasicRole"
		]
	};

	// Список ролей (имён классов), доступных после начала раунда.
	// Сюда так же добавляются роли из getLobbyRoles, у которых 
	// установлен canVisibleAfterStart в значение true
	func(getLateRoles)
	{
		[]
	};

    // Включает систему аспектов раунда. Пример аспекта: "все двери на станции украли"
    var(canAddAspect,false);
    // Можно ли запускать события "Влияния Реликты"
    getterconst_func(canPlayEvents,false);

	// -----------------------------------------------------------------//
    // ------------------------ События режима -------------------------//
    // -----------------------------------------------------------------//

	// Условие старта раунда.
	// Если код возвращает true то раунд будет запущен
	func(conditionToStart)
	{
		objParams();
        true
	};

	// Возвращает строку причины невозможности запуска режима
	func(onFailReasonToStart)
	{
		objParams();
        // Как правило здесь используются проверки из conditionToStart() 
        // для точного определения причины невозможности старта раунда
		"Не удалось запустить игру"
	};

	func(getUnsleepGameInfo)
	{
		objParams();
		null
	};
    // Сколько сообщений будет показано из getUnsleepGameInfo
    getter_func(getUnsleepMessagesCount,1);

	// Вызывается когда режим GMSp_game выбран (до старта раунда с загруженной картой)
	func(preSetup)
	{
		objParams();

	};

	// Вызывается после начала раунда когда все клиенты зашли в игру
	func(postSetup)
	{
		objParams();

	};

	// Проверка режима. Выполняется каждую секунду
	// Возвращаемое значение должно быть числом
	// Любое число, не равное 0 означает конец режима
	func(checkFinish)
	{
		objParams();        
		0
	};
	
	func(getResultTextOnFinish)
	{
		objParams();
		"Конец."
	};
	
	// Событие при завершении раунда в режиме GMSp_game
	func(onFinish)
	{
		objParams();
	};

    // -----------------------------------------------------------------//
    // -------------------- Работа с антагонистами ---------------------//
    // -----------------------------------------------------------------//
    
    /*
        Разница между скрытми и полными антагонистами довольно проста:
        - Полные антагонисты - это игроки, которые заходили за одну роль, но при входе в игру получат совершенно другую роль,
        присущую полному антагонисту. (Прим.: Грязноямск. Человек заходит за барника но появляется как Истязатель.)
        - Скрытые антагонисты - это игроки, которые получают особую цель, находясь на своей роли, за которую они заходили.
    */

    // Минимальное количество полных и скрытых антагонистов для нормальной игры
	getterconst_func(getMinFullAntags,1);
	getterconst_func(getMinHiddenAntags,1);

    func(getAntagRoleFull)
	{
		objParams_2(_usr,_index);
		""
	};

    func(handleAntagRoleHidden)
	{
		objParams_3(_usr,_mob,_index);
	};

endclass